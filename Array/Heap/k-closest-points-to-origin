using System;
using System.Collections.Generic;

public class Program
{
	//Find Kth Closest to origin
	public static void Main()
	{
		PriorityQueue<int, int> MaxHeap = new PriorityQueue<int, int>(new MaxHeapComparer()); //Max Heap
		//PriorityQueue<int, int> MinHeap = new PriorityQueue<int, int>(); //MIN Heap
		int[][] arr = new int[2][]{new int[]{1, 3}, new int[]{-2, 2}};
		int k=1;
		
		for(int i=0;i< arr.Length;i++)
		{
			int distance = (arr[i][0] * arr[i][0]) + (arr[i][1] * arr[i][1]);
			MaxHeap.Enqueue(arr[i][0],distance);
			if(MaxHeap.Count>k)
			{
				MaxHeap.Dequeue();
			}
		}
		Console.WriteLine(MaxHeap.Peek());
	}

	class MaxHeapComparer : IComparer<int>
	{
		public int Compare(int element1, int element2)
		{
			if (element1 == element2) //If both are fancy (Or both are not fancy, return 0 as they are equal)
			{
				Console.WriteLine($" 0 : element1 :{element1} && element2 : {element2}");
				return 0;
			}
			else if (element1 > element2) //if element1 is greater than element2 then put element 2 on above element one
			{
				Console.WriteLine($"-1 : element1 :{element1} && element2 : {element2}");
				return -1;
			}
			else //Otherwise it must be that B is fancy (And A is not), so return 1
			{
				Console.WriteLine($" 1 : element1 :{element1} && element2 : {element2}");
				return 1;
			}
		}
	}
}
