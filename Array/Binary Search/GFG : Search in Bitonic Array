using System;
using System.Collections.Generic;					
public class Program
{
	public static void Main()
	{
		var arr = new List<int>(){1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11};
		//var arr = new int[]{1,2,3,4,5,6,7,8};
		//var arr = new int[]{8,7,6,5,4,3,2,1};
		int find = 12;
		int low =0;
		int n = arr.Count;
		int high = n -1;
		int finalMid = -1;
		while(low <= high)
		{
			int mid =  low + ((high - low)/2);
			if((mid - 1 >= 0) && (mid + 1 <= n-1) && (arr[mid - 1 ] < arr[mid] && arr[mid + 1] < arr[mid]))
			{
				finalMid = mid;
				break;
			}
			if(arr[low] < arr[mid])
			{
				low = mid + 1;
			}
			else{
				high = mid - 1;
			}
		}
		Console.WriteLine($" {finalMid} : {arr[finalMid]} ");
	   Console.WriteLine(BinarySearch(arr,0,finalMid,find));
	   Console.WriteLine(BinarySearchDesc(arr,finalMid+1,n-1,find));
	}
	public static int BinarySearch(List<int> arr,int low,int high, int find)
	{
		while(low <= high)
		{
			int mid = low + ((high-low)/2);
			if(arr[mid] == find)
				return mid;
			
			if(arr[mid]> find)
			{
				high = mid -1;
			}else{
				low = mid +1;
			}	
		}
		return -1;
	}
	public static int BinarySearchDesc(List<int> arr,int low,int high, int find)
	{
		//19, 18, 17, 16, 15, 14, 13, 12, 11
		while(low <= high)
		{
			int mid = low + ((high-low)/2);
			if(arr[mid] == find)
				return mid;
			
			if(arr[mid]< find)
			{
				high = mid -1;
			}else{
				low = mid +1;
			}	
		}
		return -1;
	}
}
