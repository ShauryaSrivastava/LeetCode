using System;

public class Program
{
	public static void Main()
	{
		//
		LinkedList obj = new LinkedList(4);
		obj.Add(1);
		obj.Add(8);
		obj.Add(4);
		obj.Add(5);
		LinkedList obj1 = new LinkedList(5);
		obj1.Add(6);
		obj1.Add(1);
		obj1.Add(8);
		obj1.Add(4);
		obj1.Add(5);
		//
		var runner1 = obj.head;
		var runner2 = obj1.head;
		int count1 = 0;
		int count2 = 0;
		while (runner1 != null)
		{
			count1++;
			runner1 = runner1.next;
		}

		while (runner2 != null)
		{
			count2++;
			runner2 = runner2.next;
		}

		runner1 = obj.head;
		runner2 = obj1.head;
		if (count1 > count2)
		{
			for (int i = 0; i < count1 - count2; i++)
			{
				runner1 = runner1.next;
			}
		}

		if (count1 < count2)
		{
			for (int i = 0; i < count2 - count1; i++)
			{
				runner2 = runner2.next;
			}
		}

		while (runner1 != null && runner2 != null)
		{
			if (runner1.val == runner2.val)
			{
				break;
			}

			runner1 = runner1.next;
			runner2 = runner2.next;
		}

		Console.WriteLine(runner1.val);
	}

	public static void AlternativeMerge(ListNode node1, ListNode node2)
	{
		ListNode nodenext1 = null;
		ListNode nodenext2 = null;
		while (node1 != null && node2 != null)
		{
			nodenext1 = node1.next;
			node1.next = node2;
			node1 = nodenext1;
			nodenext2 = node2.next;
			node2.next = nodenext1;
			node2 = nodenext2;
		}
	}
}

public class ListNode
{
	public int val;
	public ListNode next;
	public ListNode(int val = 0, ListNode next = null)
	{
		this.val = val;
		this.next = next;
	}
}

public class LinkedList
{
	public ListNode head;
	public LinkedList(int val)
	{
		head = new ListNode(val);
	}

	public ListNode Add(int val, ListNode next = null)
	{
		ListNode node = head;
		while (node.next != null)
		{
			node = node.next;
		}

		if (next == null)
			node.next = new ListNode(val);
		else
			node.next = new ListNode(val, next);
		return node.next;
	}

	public void print()
	{
		ListNode node = head;
		while (node != null)
		{
			Console.WriteLine(node.val);
			node = node.next;
		}
	}
}
