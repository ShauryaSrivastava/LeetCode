using System;
using System.Collections.Generic;
public class Program
{
	public static void Main()
	{
		LinkedList obj = new LinkedList(1);
		obj.Add(2);
		obj.Add(3);
		obj.Add(4);
		obj.Add(5);
		obj.Add(6);
		
		ListNode mid = obj.head;
		ListNode fast = mid;
		ListNode last = null;
		while(fast!= null && fast.next != null)
		{
			last = mid;
			mid = mid.next;
			fast = fast.next.next;
		}
		last.next = null;
		
		
		//Reverse Second Half
		ListNode rNode = mid;
		ListNode cur = rNode;
		ListNode prev = null;
		ListNode next = null;
		while(cur != null)
		{
			next = cur.next;
			cur.next = prev;
			prev = cur;
			cur = next;
		}
		rNode = prev;
		//Merge Alternative
		var _temp = obj.head;
		AlternativeMerge(obj.head,rNode);
		while(_temp != null)
		{
			Console.WriteLine(_temp.val);
			_temp = _temp.next;
		}
	}
	
	public static void AlternativeMerge(ListNode node1,ListNode node2)
	{
		ListNode nodenext1=null;
		ListNode nodenext2=null;
		while(node1 != null && node2 != null)
		{
			nodenext1 = node1.next;
			node1.next = node2;
			node1 = nodenext1;
			
			nodenext2 = node2.next;
			node2.next = nodenext1;
			node2 = nodenext2;
		}
		
	}
}

public class ListNode
{
	public int val;
	public ListNode next;
	public ListNode(int val = 0, ListNode next = null)
	{
		this.val = val;
		this.next = next;
	}
}

public class LinkedList
{
	public ListNode head;
	public LinkedList(int val)
	{
	 head = new ListNode(val);
	}
	public ListNode  Add(int val,ListNode next = null)
	{
		ListNode node = head;
		while(node.next != null){node = node.next;}
		if(next == null)
		node.next = new ListNode(val);
		else
		node.next = new ListNode(val,next);
		return node.next;
	}
	public void print()
	{
		ListNode node = head;
		while(node != null)
		{ Console.WriteLine(node.val); 
		 node = node.next;
		}
	}
	
}
